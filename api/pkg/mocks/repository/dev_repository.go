// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/thnkrn/comet/api/pkg/domain"
)

// DevRepository is an autogenerated mock type for the DevRepository type
type DevRepository struct {
	mock.Mock
}

// AddValueToSSTFile provides a mock function with given fields: ctx, fileName, key, value
func (_m *DevRepository) AddValueToSSTFile(ctx context.Context, fileName string, key string, value []byte) ([]byte, error) {
	ret := _m.Called(ctx, fileName, key, value)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) ([]byte, error)); ok {
		return rf(ctx, fileName, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) []byte); ok {
		r0 = rf(ctx, fileName, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = rf(ctx, fileName, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDB provides a mock function with given fields: ctx
func (_m *DevRepository) ListDB(ctx context.Context) []domain.DB {
	ret := _m.Called(ctx)

	var r0 []domain.DB
	if rf, ok := ret.Get(0).(func(context.Context) []domain.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DB)
		}
	}

	return r0
}

// PullFile provides a mock function with given fields: ctx, fileName, source, ingestFolder
func (_m *DevRepository) PullFile(ctx context.Context, fileName string, source string, ingestFolder string) error {
	ret := _m.Called(ctx, fileName, source, ingestFolder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, fileName, source, ingestFolder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDevRepository creates a new instance of DevRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDevRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DevRepository {
	mock := &DevRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
