// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, dbName
func (_m *UserRepository) Count(ctx context.Context, dbName string) (string, error) {
	ret := _m.Called(ctx, dbName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, dbName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateByKey provides a mock function with given fields: ctx, dbName, key, value
func (_m *UserRepository) CreateByKey(ctx context.Context, dbName string, key string, value []byte) ([]byte, error) {
	ret := _m.Called(ctx, dbName, key, value)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) ([]byte, error)); ok {
		return rf(ctx, dbName, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) []byte); ok {
		r0 = rf(ctx, dbName, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = rf(ctx, dbName, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByKey provides a mock function with given fields: ctx, dbName, key
func (_m *UserRepository) DeleteByKey(ctx context.Context, dbName string, key string) error {
	ret := _m.Called(ctx, dbName, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dbName, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByKey provides a mock function with given fields: ctx, dbName, key
func (_m *UserRepository) GetByKey(ctx context.Context, dbName string, key string) ([]byte, error) {
	ret := _m.Called(ctx, dbName, key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, dbName, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, dbName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dbName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastIngest provides a mock function with given fields: ctx, dbName
func (_m *UserRepository) GetLastIngest(ctx context.Context, dbName string) ([]byte, error) {
	ret := _m.Called(ctx, dbName)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiGet provides a mock function with given fields: ctx, dbName, keys
func (_m *UserRepository) MultiGet(ctx context.Context, dbName string, keys [][]byte) ([]string, error) {
	ret := _m.Called(ctx, dbName, keys)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [][]byte) ([]string, error)); ok {
		return rf(ctx, dbName, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, [][]byte) []string); ok {
		r0 = rf(ctx, dbName, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [][]byte) error); ok {
		r1 = rf(ctx, dbName, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
