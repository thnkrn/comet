// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AdminUsecase is an autogenerated mock type for the AdminUsecase type
type AdminUsecase struct {
	mock.Mock
}

// CatchUpWithPrimary provides a mock function with given fields: ctx, dbName
func (_m *AdminUsecase) CatchUpWithPrimary(ctx context.Context, dbName string) error {
	ret := _m.Called(ctx, dbName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dbName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCheckPoint provides a mock function with given fields: ctx, dbName, dir
func (_m *AdminUsecase) CreateCheckPoint(ctx context.Context, dbName string, dir string) error {
	ret := _m.Called(ctx, dbName, dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dbName, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDBProperty provides a mock function with given fields: ctx, dbName, property
func (_m *AdminUsecase) GetDBProperty(ctx context.Context, dbName string, property string) (string, error) {
	ret := _m.Called(ctx, dbName, property)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, dbName, property)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, dbName, property)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dbName, property)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastIngest provides a mock function with given fields: ctx, dbName
func (_m *AdminUsecase) GetLastIngest(ctx context.Context, dbName string) ([]byte, error) {
	ret := _m.Called(ctx, dbName)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, dbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: ctx, dbName, dir
func (_m *AdminUsecase) Ingest(ctx context.Context, dbName string, dir string) error {
	ret := _m.Called(ctx, dbName, dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, dbName, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdminUsecase creates a new instance of AdminUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminUsecase {
	mock := &AdminUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
