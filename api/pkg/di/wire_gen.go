// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/thnkrn/comet/api/pkg/api"
	"github.com/thnkrn/comet/api/pkg/api/handler"
	"github.com/thnkrn/comet/api/pkg/api/middleware"
	"github.com/thnkrn/comet/api/pkg/config"
	"github.com/thnkrn/comet/api/pkg/driver/db"
	"github.com/thnkrn/comet/api/pkg/driver/log/adapter"
	config2 "github.com/thnkrn/comet/api/pkg/driver/log/config"
	adapter2 "github.com/thnkrn/comet/api/pkg/repository/adapter"
	adapter3 "github.com/thnkrn/comet/api/pkg/usecase/adapter"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*api.ServerHTTP, error) {
	logger, err := config2.ProvidZapLogger(cfg)
	if err != nil {
		return nil, err
	}
	zapImplement := adapter.ProvideLogger(logger)
	errorHandler := middleware.NewErrorHandler(zapImplement)
	authentication := middleware.NewAuthentication()
	middlewares := &api.Middlewares{
		ErrorHandler:   errorHandler,
		Authentication: authentication,
	}
	rocksDBPool, err := db.ConnectRocksdb(cfg, zapImplement)
	if err != nil {
		return nil, err
	}
	userRepository := adapter2.NewUserRepository(rocksDBPool, zapImplement)
	userUsecase := adapter3.NewUserUseCase(userRepository)
	userHandler := handler.NewUserHandler(userUsecase)
	adminRepository := adapter2.NewAdminRepository(rocksDBPool, zapImplement, cfg)
	adminUsecase := adapter3.NewAdminUseCase(adminRepository, cfg, zapImplement)
	adminHandler := handler.NewAdminHandler(adminUsecase)
	devRepository := adapter2.NewDevRepository(rocksDBPool, zapImplement, cfg)
	devUsecase := adapter3.NewDevUseCase(devRepository, cfg)
	devHandler := handler.NewDevHandler(devUsecase)
	handlers := api.Handlers{
		UserHandler:  userHandler,
		AdminHandler: adminHandler,
		DevHandler:   devHandler,
	}
	serverHTTP := api.NewServerHTTP(middlewares, handlers, zapImplement, cfg)
	return serverHTTP, nil
}
