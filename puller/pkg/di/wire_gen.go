// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/thnkrn/comet/puller/pkg/api"
	"github.com/thnkrn/comet/puller/pkg/api/handler"
	"github.com/thnkrn/comet/puller/pkg/api/middleware"
	"github.com/thnkrn/comet/puller/pkg/config"
	adapter2 "github.com/thnkrn/comet/puller/pkg/driver/client/adapter"
	adapter4 "github.com/thnkrn/comet/puller/pkg/driver/file/adapter"
	"github.com/thnkrn/comet/puller/pkg/driver/job_stage"
	"github.com/thnkrn/comet/puller/pkg/driver/log/adapter"
	config2 "github.com/thnkrn/comet/puller/pkg/driver/log/config"
	adapter3 "github.com/thnkrn/comet/puller/pkg/driver/rocksdb_admin/adapter"
	adapter7 "github.com/thnkrn/comet/puller/pkg/executor/adapter"
	adapter5 "github.com/thnkrn/comet/puller/pkg/repository/adapter"
	"github.com/thnkrn/comet/puller/pkg/scheduler"
	adapter6 "github.com/thnkrn/comet/puller/pkg/usecase/adapter"
)

// Injectors from wire.go:

func InitializeApp(config3 config.Config) (*Application, error) {
	logger, err := config2.ProvidZapLogger(config3)
	if err != nil {
		return nil, err
	}
	zapImplement := adapter.ProvideLogger(logger)
	errorHandler := middleware.NewErrorHandler(zapImplement)
	middlewares := &api.Middlewares{
		ErrorHandler: errorHandler,
	}
	httpClient := adapter2.NewHTTPClient()
	rocksdbAdmin := adapter3.NewRocksdbAdmin(config3, httpClient)
	file := adapter4.NewFile(config3)
	client, err := config.ConnectGCS(config3)
	if err != nil {
		return nil, err
	}
	taskRepository := adapter5.NewTaskRepository(rocksdbAdmin, file, config3, client, zapImplement)
	jobPools, err := job_stage.CreateJobPool(config3)
	if err != nil {
		return nil, err
	}
	taskUsecase := adapter6.NewTaskUsecase(taskRepository, file, jobPools, zapImplement)
	taskHandler := handler.NewTaskHandler(taskUsecase)
	handlers := api.Handlers{
		TaskHandler: taskHandler,
	}
	serverHTTP := api.NewServerHTTP(middlewares, handlers, zapImplement, config3)
	executorImplement := adapter7.ProvideExecutor(taskUsecase, config3)
	schedulerScheduler, err := scheduler.NewScheduler(zapImplement, config3, executorImplement)
	if err != nil {
		return nil, err
	}
	application := &Application{
		Server:    serverHTTP,
		Scheduler: schedulerScheduler,
	}
	return application, nil
}

// wire.go:

type Application struct {
	Server    *api.ServerHTTP
	Scheduler *scheduler.Scheduler
}
