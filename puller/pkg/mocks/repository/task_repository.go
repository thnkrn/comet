// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/thnkrn/comet/puller/pkg/domain"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// DownloadSST provides a mock function with given fields: ctx, fromGCS
func (_m *TaskRepository) DownloadSST(ctx context.Context, fromGCS string) (bool, error) {
	ret := _m.Called(ctx, fromGCS)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, fromGCS)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, fromGCS)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fromGCS)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastIngest provides a mock function with given fields: ctx, authorization, db
func (_m *TaskRepository) GetLastIngest(ctx context.Context, authorization string, db string) (string, error) {
	ret := _m.Called(ctx, authorization, db)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, authorization, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, authorization, db)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, authorization, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLists provides a mock function with given fields: ctx, prefix
func (_m *TaskRepository) GetLists(ctx context.Context, prefix string) ([]string, error) {
	ret := _m.Called(ctx, prefix)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: ctx, authorization, db, directory
func (_m *TaskRepository) Ingest(ctx context.Context, authorization string, db string, directory string) error {
	ret := _m.Called(ctx, authorization, db, directory)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, authorization, db, directory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PerformJobPool provides a mock function with given fields: jobPool, db
func (_m *TaskRepository) PerformJobPool(jobPool domain.JobPools, db string) (domain.Job, error) {
	ret := _m.Called(jobPool, db)

	var r0 domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.JobPools, string) (domain.Job, error)); ok {
		return rf(jobPool, db)
	}
	if rf, ok := ret.Get(0).(func(domain.JobPools, string) domain.Job); ok {
		r0 = rf(jobPool, db)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}

	if rf, ok := ret.Get(1).(func(domain.JobPools, string) error); ok {
		r1 = rf(jobPool, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
