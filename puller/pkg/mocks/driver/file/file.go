// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

// CreateDirectoryInStaging provides a mock function with given fields: newDirectory
func (_m *File) CreateDirectoryInStaging(newDirectory string) (string, error) {
	ret := _m.Called(newDirectory)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(newDirectory)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(newDirectory)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(newDirectory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSuccesFile provides a mock function with given fields: directory
func (_m *File) CreateSuccesFile(directory string) error {
	ret := _m.Called(directory)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(directory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsExistsWithSuccessFlag provides a mock function with given fields: path
func (_m *File) IsExistsWithSuccessFlag(path string) (bool, error) {
	ret := _m.Called(path)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: directory
func (_m *File) Remove(directory string) error {
	ret := _m.Called(directory)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(directory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
